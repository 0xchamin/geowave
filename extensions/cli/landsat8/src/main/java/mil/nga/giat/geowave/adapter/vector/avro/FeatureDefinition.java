/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.adapter.vector.avro;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FeatureDefinition extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"FeatureDefinition\",\"namespace\":\"mil.nga.giat.geowave.adapter.vector.avro\",\"fields\":[{\"name\":\"featureTypeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"attributeNames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"attributeTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"attributeDefaultClassifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public java.lang.String featureTypeName;
	@Deprecated
	public java.util.List<java.lang.String> attributeNames;
	@Deprecated
	public java.util.List<java.lang.String> attributeTypes;
	@Deprecated
	public java.util.List<java.lang.String> attributeDefaultClassifications;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public FeatureDefinition() {}

	/**
	 * All-args constructor.
	 */
	public FeatureDefinition(
			java.lang.String featureTypeName,
			java.util.List<java.lang.String> attributeNames,
			java.util.List<java.lang.String> attributeTypes,
			java.util.List<java.lang.String> attributeDefaultClassifications ) {
		this.featureTypeName = featureTypeName;
		this.attributeNames = attributeNames;
		this.attributeTypes = attributeTypes;
		this.attributeDefaultClassifications = attributeDefaultClassifications;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return featureTypeName;
			case 1:
				return attributeNames;
			case 2:
				return attributeTypes;
			case 3:
				return attributeDefaultClassifications;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				featureTypeName = (java.lang.String) value$;
				break;
			case 1:
				attributeNames = (java.util.List<java.lang.String>) value$;
				break;
			case 2:
				attributeTypes = (java.util.List<java.lang.String>) value$;
				break;
			case 3:
				attributeDefaultClassifications = (java.util.List<java.lang.String>) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'featureTypeName' field.
	 */
	public java.lang.String getFeatureTypeName() {
		return featureTypeName;
	}

	/**
	 * Sets the value of the 'featureTypeName' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setFeatureTypeName(
			java.lang.String value ) {
		this.featureTypeName = value;
	}

	/**
	 * Gets the value of the 'attributeNames' field.
	 */
	public java.util.List<java.lang.String> getAttributeNames() {
		return attributeNames;
	}

	/**
	 * Sets the value of the 'attributeNames' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setAttributeNames(
			java.util.List<java.lang.String> value ) {
		this.attributeNames = value;
	}

	/**
	 * Gets the value of the 'attributeTypes' field.
	 */
	public java.util.List<java.lang.String> getAttributeTypes() {
		return attributeTypes;
	}

	/**
	 * Sets the value of the 'attributeTypes' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setAttributeTypes(
			java.util.List<java.lang.String> value ) {
		this.attributeTypes = value;
	}

	/**
	 * Gets the value of the 'attributeDefaultClassifications' field.
	 */
	public java.util.List<java.lang.String> getAttributeDefaultClassifications() {
		return attributeDefaultClassifications;
	}

	/**
	 * Sets the value of the 'attributeDefaultClassifications' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setAttributeDefaultClassifications(
			java.util.List<java.lang.String> value ) {
		this.attributeDefaultClassifications = value;
	}

	/** Creates a new FeatureDefinition RecordBuilder */
	public static mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder newBuilder() {
		return new mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder();
	}

	/**
	 * Creates a new FeatureDefinition RecordBuilder by copying an existing
	 * Builder
	 */
	public static mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder other ) {
		return new mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder(
				other);
	}

	/**
	 * Creates a new FeatureDefinition RecordBuilder by copying an existing
	 * FeatureDefinition instance
	 */
	public static mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition other ) {
		return new mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder(
				other);
	}

	/**
	 * RecordBuilder for FeatureDefinition instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<FeatureDefinition> implements
			org.apache.avro.data.RecordBuilder<FeatureDefinition>
	{

		private java.lang.String featureTypeName;
		private java.util.List<java.lang.String> attributeNames;
		private java.util.List<java.lang.String> attributeTypes;
		private java.util.List<java.lang.String> attributeDefaultClassifications;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.featureTypeName)) {
				this.featureTypeName = data().deepCopy(
						fields()[0].schema(),
						other.featureTypeName);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.attributeNames)) {
				this.attributeNames = data().deepCopy(
						fields()[1].schema(),
						other.attributeNames);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.attributeTypes)) {
				this.attributeTypes = data().deepCopy(
						fields()[2].schema(),
						other.attributeTypes);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.attributeDefaultClassifications)) {
				this.attributeDefaultClassifications = data().deepCopy(
						fields()[3].schema(),
						other.attributeDefaultClassifications);
				fieldSetFlags()[3] = true;
			}
		}

		/** Creates a Builder by copying an existing FeatureDefinition instance */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition other ) {
			super(
					mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.featureTypeName)) {
				this.featureTypeName = data().deepCopy(
						fields()[0].schema(),
						other.featureTypeName);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.attributeNames)) {
				this.attributeNames = data().deepCopy(
						fields()[1].schema(),
						other.attributeNames);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.attributeTypes)) {
				this.attributeTypes = data().deepCopy(
						fields()[2].schema(),
						other.attributeTypes);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.attributeDefaultClassifications)) {
				this.attributeDefaultClassifications = data().deepCopy(
						fields()[3].schema(),
						other.attributeDefaultClassifications);
				fieldSetFlags()[3] = true;
			}
		}

		/** Gets the value of the 'featureTypeName' field */
		public java.lang.String getFeatureTypeName() {
			return featureTypeName;
		}

		/** Sets the value of the 'featureTypeName' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setFeatureTypeName(
				java.lang.String value ) {
			validate(
					fields()[0],
					value);
			this.featureTypeName = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'featureTypeName' field has been set */
		public boolean hasFeatureTypeName() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'featureTypeName' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearFeatureTypeName() {
			featureTypeName = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'attributeNames' field */
		public java.util.List<java.lang.String> getAttributeNames() {
			return attributeNames;
		}

		/** Sets the value of the 'attributeNames' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setAttributeNames(
				java.util.List<java.lang.String> value ) {
			validate(
					fields()[1],
					value);
			this.attributeNames = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'attributeNames' field has been set */
		public boolean hasAttributeNames() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'attributeNames' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearAttributeNames() {
			attributeNames = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'attributeTypes' field */
		public java.util.List<java.lang.String> getAttributeTypes() {
			return attributeTypes;
		}

		/** Sets the value of the 'attributeTypes' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setAttributeTypes(
				java.util.List<java.lang.String> value ) {
			validate(
					fields()[2],
					value);
			this.attributeTypes = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'attributeTypes' field has been set */
		public boolean hasAttributeTypes() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'attributeTypes' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearAttributeTypes() {
			attributeTypes = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		/** Gets the value of the 'attributeDefaultClassifications' field */
		public java.util.List<java.lang.String> getAttributeDefaultClassifications() {
			return attributeDefaultClassifications;
		}

		/** Sets the value of the 'attributeDefaultClassifications' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setAttributeDefaultClassifications(
				java.util.List<java.lang.String> value ) {
			validate(
					fields()[3],
					value);
			this.attributeDefaultClassifications = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/**
		 * Checks whether the 'attributeDefaultClassifications' field has been
		 * set
		 */
		public boolean hasAttributeDefaultClassifications() {
			return fieldSetFlags()[3];
		}

		/** Clears the value of the 'attributeDefaultClassifications' field */
		public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearAttributeDefaultClassifications() {
			attributeDefaultClassifications = null;
			fieldSetFlags()[3] = false;
			return this;
		}

		@Override
		public FeatureDefinition build() {
			try {
				FeatureDefinition record = new FeatureDefinition();
				record.featureTypeName = fieldSetFlags()[0] ? this.featureTypeName
						: (java.lang.String) defaultValue(fields()[0]);
				record.attributeNames = fieldSetFlags()[1] ? this.attributeNames
						: (java.util.List<java.lang.String>) defaultValue(fields()[1]);
				record.attributeTypes = fieldSetFlags()[2] ? this.attributeTypes
						: (java.util.List<java.lang.String>) defaultValue(fields()[2]);
				record.attributeDefaultClassifications = fieldSetFlags()[3] ? this.attributeDefaultClassifications
						: (java.util.List<java.lang.String>) defaultValue(fields()[3]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
